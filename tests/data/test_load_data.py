import os
from contextlib import AbstractContextManager
from contextlib import nullcontext as does_not_raise
from typing import Optional

import pytest
from datasets import DatasetDict


from src.data.load_data import load_data
from src import DatasetType, NumCausalType, PlicitType, SentenceType, TaskType

THIS_DIR: str = os.path.dirname(os.path.abspath(__file__))


@pytest.mark.parametrize(
    (
        "task_name, dataset_name, test_samples, sent_type, num_causal, plicit, "
        "num_train, num_valid, num_test, expectation"
    ),
    [
        (
            "sequence_classification",
            "altlex",
            None,
            "all",
            "all",
            "all",
            462,
            115,
            401,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "altlex",
            None,
            "intra",
            "all",
            "all",
            -1,
            -1,
            -1,
            pytest.raises(ValueError),
        ),
        (
            "sequence_classification",
            "altlex",
            None,
            "all",
            "all",
            "explicit",
            -1,
            -1,
            -1,
            pytest.raises(AssertionError),
        ),
        (
            "span_detection",
            "altlex",
            300,
            "all",
            "all",
            "all",
            252,
            63,
            111,
            does_not_raise(),
        ),
        (
            "span_detection",
            "altlex",
            None,
            "all",
            "single",
            "all",
            252,
            63,
            103,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "because",
            None,
            "all",
            "all",
            "all",
            852,
            51,
            51,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "because",
            None,
            "inter",
            "all",
            "all",
            -1,
            -1,
            -1,
            pytest.raises(ValueError),
        ),
        (
            "sequence_classification",
            "because",
            None,
            "all",
            "all",
            "implicit",
            -1,
            -1,
            -1,
            pytest.raises(AssertionError),
        ),
        (
            "span_detection",
            "because",
            None,
            "all",
            "all",
            "all",
            879,
            40,
            40,
            does_not_raise(),
        ),
        (
            "span_detection",
            "because",
            None,
            "all",
            "single",
            "all",
            883,
            36,
            36,
            does_not_raise(),
        ),
        (
            "span_detection",
            "because",
            None,
            "all",
            "multi",
            "all",
            915,
            4,
            4,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "ctb",
            None,
            "all",
            "all",
            "all",
            1569,
            316,
            316,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "ctb",
            None,
            "intra",
            "all",
            "all",
            1673,
            212,
            212,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "ctb",
            None,
            "inter",
            "all",
            "all",
            1781,
            104,
            104,
            does_not_raise(),
        ),
        (
            "span_detection",
            "ctb",
            None,
            "all",
            "single",
            "all",
            -1,
            -1,
            -1,
            pytest.raises(ValueError),
        ),
        (
            "sequence_classification",
            "esl",
            None,
            "all",
            "all",
            "all",
            1768,
            232,
            232,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "esl",
            None,
            "intra",
            "all",
            "all",
            1903,
            97,
            97,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "esl",
            None,
            "inter",
            "all",
            "all",
            1865,
            135,
            135,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "pdtb",
            None,
            "all",
            "all",
            "all",
            26684,
            8083,
            8083,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "pdtb",
            1000,
            "all",
            "all",
            "all",
            26684,
            8083,
            1000,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "pdtb",
            None,
            "intra",
            "all",
            "all",
            31370,
            3397,
            3397,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "pdtb",
            None,
            "inter",
            "all",
            "all",
            30081,
            4686,
            4686,
            does_not_raise(),
        ),
        (
            "span_detection",
            "pdtb",
            None,
            "all",
            "all",
            "all",
            7913,
            2001,
            2001,
            does_not_raise(),
        ),
        (
            "span_detection",
            "pdtb",
            None,
            "all",
            "all",
            "explicit",
            9752,
            162,
            162,
            does_not_raise(),
        ),
        (
            "span_detection",
            "pdtb",
            None,
            "all",
            "all",
            "implicit",
            8075,
            1839,
            1839,
            does_not_raise(),
        ),
        (
            "span_detection",
            "pdtb",
            None,
            "all",
            "single",
            "all",
            8057,
            1857,
            1857,
            does_not_raise(),
        ),
        (
            "span_detection",
            "pdtb",
            None,
            "all",
            "multi",
            "all",
            9760,
            154,
            154,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "semeval",
            None,
            "all",
            "all",
            "all",
            6380,
            1595,
            2715,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "semeval",
            None,
            "all",
            "all",
            "implicit",
            6380,
            1595,
            2715,
            does_not_raise(),
        ),
        (
            "span_detection",
            "semeval",
            None,
            "intra",
            "all",
            "all",
            -1,
            -1,
            -1,
            pytest.raises(ValueError),
        ),
        (
            "sequence_classification",
            "fincausal",
            None,
            "all",
            "all",
            "all",
            17060,
            2132,
            2133,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "fincausal",
            None,
            "all",
            "all",
            "implicit",
            17060,
            2132,
            2133,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "fincausal",
            None,
            "all",
            "all",
            "explicit",
            17060,
            2132,
            2133,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "fincausal",
            None,
            "intra",
            "all",
            "all",
            17060,
            2132,
            1234,
            does_not_raise(),
        ),
        (
            "sequence_classification",
            "fincausal",
            None,
            "inter",
            "all",
            "all",
            17060,
            2132,
            899,
            does_not_raise(),
        ),
        (
            "span_detection",
            "fincausal",
            None,
            "all",
            "all",
            "all",
            1087,
            136,
            136,
            does_not_raise(),
        ),
        (
            "span_detection",
            "fincausal",
            None,
            "all",
            "all",
            "explicit",
            1087,
            136,
            22,
            does_not_raise(),
        ),
        (
            "span_detection",
            "fincausal",
            None,
            "all",
            "all",
            "implicit",
            1087,
            136,
            114,
            does_not_raise(),
        ),
        (
            "chain_classification",
            "reco",
            None,
            "all",
            "all",
            "all",
            3111,
            417,
            672,
            does_not_raise(),
        ),
        (
            "chain_classification",
            "pdtb",
            None,
            "all",
            "all",
            "all",
            -1,
            -1,
            -1,
            pytest.raises(ValueError),
        ),
    ],
)
def test_load_data(
    task_name: str,
    dataset_name: str,
    test_samples: Optional[int],
    sent_type: str,
    num_causal: str,
    plicit: str,
    num_train: int,
    num_valid: int,
    num_test: int,
    expectation: AbstractContextManager,
) -> None:
    with expectation:
        dsd: DatasetDict = load_data(
            task_enum=TaskType[task_name],
            dataset_enum=DatasetType[dataset_name],
            sentencetype_enum=SentenceType[sent_type],
            numcausal_enum=NumCausalType[num_causal],
            plicit_enum=PlicitType[plicit],
            data_dir=os.path.join(THIS_DIR, "../../data"),
            test_samples=test_samples,
        )
        assert isinstance(dsd, DatasetDict)
        assert len(dsd["train"]) == num_train
        assert len(dsd["valid"]) == num_valid
        assert len(dsd["test"]) == num_test
